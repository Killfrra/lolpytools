#!/usr/bin/env python
from .inibin import ihash
from sys import stderr

# Note: rito likes to use ' and * prefixes to "comment out" stuff

all_gamemodes = [
    "ARAM",
    "CLASSIC",
    "FIRSTBLOOD",
    "ODIN",
    "ONEFORALL",
    "TUTORIAL",
    "ASCENSION",
    "URF",
]
all_mutators = [
    *all_gamemodes,
    "NightmareBots",
]

all_inibin_fixlist = [
# LEVELS/MapX/DeathTimes.inibin
    {
        "sections": [ "DeathTimeScaling" ],
        "names": [
            "IncrementTime",
            "PercentCap",
            "PercentIncrease",
            "StartTime",
        ]
    },
    {
        "sections": [ "DeathTimeSettings" ], 
        "names": [
            "AllowDeathTimeMods",
            "StartDeathTimerForZombies",
        ]
    },
    {
        "sections": [ "DeathWaveRespawn" ], 
        "names": [
            "WaveRespawnInterval",
        ]
    },
    {
        "sections": [ "ExpGrantedOnDeath" ], 
        "names": [
            "BaseExpMultiple",
            "LevelDifferenceExpMultiple",
            "MinimumExpMultiple",
        ]
    },
    {
        "sections": [ "TimeDeadPerLevel", "TimeDeadPerLevelTutorial" ],
        "names": [
            *[ "Level{:02}".format(x) for x in range(0, 31) ]
        ]  
    },
# LEVELS/MapX/Items.inibin
    {
        "sections":[ 
            "ItemInclusionList",
            "UnpurchasableItemList",
            *[ "UnpurchasableItemList_{}".format(x) for x in all_mutators ],
        ],
        "names":[
            *[ "Item{}".format(x) for x in range(0, 200) ]
        ]
    },
# LEVELS/MapX/NeutralTimers.inibin
    {
        "sections": [ "General" ],
        "names": [ 
            *[ "Element{}".format(x) for x in range(0, 10) ],
            *[ "Element{}_{}".format(x, y) for x in range(0, 10) for y in [
                    "Default",
                    "Colorblind",
                    "Spectator",
                ]
            ],
            "HudFrameHandle",
            "HudGroup",
            "RespawnTime",
            "TimerTooltip",
            "TimerWarningThreshold",
        ],
    },
    {
        "sections": [
            *[ "Timer{}".format(x) for x in range(0, 10) ]
        ],
        "names": [
            "HudHandleText",
            "HudHandleIcon",
            *[ "HudHandleIcon_{}".format(x) for x in [
                    "Default",
                    "Colorblind",
                    "Spectator",
                ]
            ],
            "TimerType",
            "TooltipName",
            "TooltipRespawn",
            "TimerWarningThreshold",
        ]
    },
# LEVELS/MapX/ExpCurve.inibin
    {
        "sections": [ "EXP", "EXPTutorial" ], 
        "names": [
            *[ "Level{}".format(x) for x in range(0, 31) ]
        ]
    },
# LEVELS/MapX/StatsProgression.inibin
    {
        "sections": [ "PerLevelStatsFactor" ],
        "names": [
            *[ "Level{}".format(x) for x in range(0, 31) ]
        ]
    },
# DATA/Globals/ABGroups.inibin
    {
        "sections": [
            "Settings",
        ],
        "names": [
            "EnabledGroups",
        ],
    },
# DATA/Globals/Critical.inibin
    {
        "sections": [ "Karma" ], 
        "names": [
            *[ "Critical{}".format(c) for c in range(0, 201) ]
        ]
    },
# Data/Globals/Tips.inibin
    {
        "sections": [
            "Global",
            *all_gamemodes
        ], 
        "names": [
            "MaxViewable",
        ],
    },
    {
        "sections": [
            "Global",
        ], 
        "names": [
            "DialogueClosedSound",
            "DialogueOpenedSound",
            "MaxViewable",
            "TipRecievedSound",
        ],
    },
# DATA/Globals/GameMutatorExpansions.inibin
    {
        "sections": [
            *all_mutators
        ],
        "names": [
            *[ "Mutator{}".format(x) for x in range(0, 10) ],
        ],
    },
# DATA/Globals/Bounty.inibin
    {
        "sections": [
            "Global",
            *all_gamemodes
        ], 
        "names": [
            "AssistDeathstreakReduction",
            "AssistDurationOverride",
            "AssistGoldPerStreak",
            "AssistGoldStreakCap",
            "AssistGoldStreakStart",
            "AssistPoolMax",
            "AssistPoolMaxValueTime",
            "AssistPoolMin",
            "AssistPoolMinValueTime",
            "AssistStreakBonus",
            "AssistStreakMin",
            "BaseGold",
            "BountyRoundDownIncrement",
            "DeathStreakPenalty",
            "FirstBloodBonus",
            "GoldPoolForAssist",
            "KillStreakBonus",
            "MaxKillStreakBonus",
            "MinAssistsForStreak",
            "MinDeathsForStreak",
            "MinDeathStreakPenalty",
            "MinionGoldDeathstreakReductionRatio",
            "MinionGoldValueForBounty",
            "MinKillsForStreak",
            "MinMinionGoldValueForBounty",
            "PercentBountyResetOnDeath",
            "TimeBasedMinValuePercent",
            "TimeToMaxValueInSeconds",
            "TimeToMinValueInSeconds",
        ]
    },
# DATA/Globals/*_Stats.inibin
    {
        "sections": [
            "HeroStats",
        ],
        "names": [
            "ID",
            "NAME",
            "SKIN",
            "TEAM",
            "WIN",
            "EXP",
            "LEVEL",
            "GOLD_SPENT",
            "GOLD_EARNED",
            "NUM_DEATHS",
            "CHAMPIONS_KILLED",
            "ASSISTS",
            "BARRACKS_KILLED",
            "TURRETS_KILLED",
            "HQ_KILLED",
            "MINIONS_KILLED",
            "NEUTRAL_MINIONS_KILLED",
            "SUPER_MONSTER_KILLED",
            "LARGEST_KILLING_SPREE",
            "KILLING_SPREES",
            "LARGEST_MULTI_KILL",
            "TOTAL_DAMAGE_DEALT",
            "PHYSICAL_DAMAGE_DEALT_PLAYER",
            "MAGIC_DAMAGE_DEALT_PLAYER",
            "TOTAL_DAMAGE_DEALT_TO_CHAMPIONS",
            "PHYSICAL_DAMAGE_DEALT_TO_CHAMPIONS",
            "MAGIC_DAMAGE_DEALT_TO_CHAMPIONS",
            "TOTAL_DAMAGE_TAKEN",
            "PHYSICAL_DAMAGE_TAKEN",
            "MAGIC_DAMAGE_TAKEN",
            "DOUBLE_KILLS",
            "TRIPLE_KILLS",
            "QUADRA_KILLS",
            "PENTA_KILLS",
            "UNREAL_KILLS",
            "ITEMS_PURCHASED",
            "CONSUMABLES_PURCHASED",
            "SPELL1_CAST",
            "SPELL2_CAST",
            "SPELL3_CAST",
            "SPELL4_CAST",
            "SUMMON_SPELL1_CAST",
            "SUMMON_SPELL2_CAST",
            "LARGEST_CRITICAL_STRIKE",
            "TIME_PLAYED",
            "LONGEST_TIME_SPENT_LIVING",
            "TOTAL_TIME_SPENT_DEAD",
            "TOTAL_HEAL",
            "TOTAL_UNITS_HEALED",
            "FRIENDLY_TURRET_LOST",
            "FRIENDLY_DAMPEN_LOST",
            "FRIENDLY_HQ_LOST",
            "TOOK_FIRST_BLOOD",
            "WAS_AFK",
            "WAS_AFK_AFTER_FAILED_SURRENDER",
            "TIME_OF_FROM_LAST_DISCONNECT",
            "TIME_SPENT_DISCONNECTED",
            "NEVER_ENTERED_GAME",
            "TEAMMATE_NEVER_ENTERED_GAME",
            "ITEM0",
            "ITEM1",
            "ITEM2",
            "ITEM3",
            "ITEM4",
            "ITEM5",
            "ITEM6",
            "SIGHT_WARDS_BOUGHT_IN_GAME",
            "VISION_WARDS_BOUGHT_IN_GAME",
            "NODE_CAPTURE",
            "NODE_NEUTRALIZE",
            "NODE_KILL_OFFENSE",
            "TEAM_OBJECTIVE",
            "DEFEND_POINT_NEUTRALIZE",
            "NODE_KILL_DEFENSE",
            "NODE_TIME_DEFENSE",
            "LAST_STAND",
            "NODE_CAPTURE_ASSIST",
            "NODE_NEUTRALIZE_ASSIST",
            "TOTAL_PLAYER_SCORE",
            "OFFENSE_PLAYER_SCORE",
            "DEFENSE_PLAYER_SCORE",
            "COMBAT_PLAYER_SCORE",
            "OBJECTIVE_PLAYER_SCORE",
            "VICTORY_POINT_TOTAL",
            "TOTAL_SCORE_RANK",
            "PING",
            "TRUE_DAMAGE_DEALT_PLAYER",
            "TRUE_DAMAGE_TAKEN",
            "TRUE_DAMAGE_DEALT_TO_CHAMPIONS",
            "WARD_PLACED",
            "WARD_KILLED",
            "TOTAL_TIME_CROWD_CONTROL_DEALT",
            "NEUTRAL_MINIONS_KILLED",
            "NEUTRAL_MINIONS_KILLED_YOUR_JUNGLE",
            "NEUTRAL_MINIONS_KILLED_ENEMY_JUNGLE",
        ],
    },
# DATA/Globals/Quests.inibin
    {
        "sections": [
            "PrimaryQuests", 
            "SecondaryQuests", 
            "Objectives",
        ],
        "names": [
            *[ "{}{}".format(x, y) for x in [
                    "RecievedSound",
                    "CompletedSound",
                    "FailedSound",
                ] for y in [
                    "Effect",
                    "VO_ID",
                    "VO_Folder",
                ]
            ],
            "CompletedText",
            "FailedText",
            "MaxViewable",
            "RecievedText",
            "TitleText",
        ]
    },
    {
        "sections": [ "Coefficients" ],
        "names": [
            "MCoefficient",
            "NCoefficient",
        ]
    },
# DATA/Characters/HeroSpawnOffsets.inibin
    {
        "sections": [
            * [ "Chaos{}".format(x) for x in range(1, 7) ],
            * [ "Order{}".format(x) for x in range(1, 7) ],
        ],
        "names": [
            * [ "Pos{}".format(x) for x in range(1, 7) ],
            * [ "Facing{}".format(x) for x in range(1, 7) ],
        ],
    },
# spells, items, talents (everything is a buff -.-)
    {
        "sections": [ "BuffData" ], 
        "names": [
            "AlternateName",
            "ApplyMaterialOnHitSound",
            "DisplayName",
            "DynamicExtended",
            "DynamicTooltip",
            "DeathRecapPriority",
            *[ "Effect{}Level{}Amount".format(x, y) for x in range(0, 17) for y in range(0, 7) ],
            *[ "FloatStaticsDecimals{}".format(x) for x in range(0, 17) ],
            *[ "FloatVarsDecimals{}".format(x) for x in range(0, 17) ],
            "HideDurationInUI",
            "InventoryIcon",
            "ShowInTrackerUI",
            "Sound_VOEventCategory",
        ]
    },
# DATA/Items/metadadata/categories.inibin
# DATA/Items/ItemGroups/*.inibin
# DATA/Items/X.inibin
    {
        "sections": [ "Builds" ],
        "names": [
            *[ "Item{}".format(x) for x in range(0, 17) ]
        ]
    },
    {
        "sections": [ "Categories" ],
        "names": [
            "Active",
            "Armor",
            "ArmorPenetration",
            "AttackSpeed",
            "Aura",
            "Boots",
            "Consumable",
            "CooldownReduction",
            "CriticalStrike",
            "Damage",
            "GoldPer",
            "Health",
            "HealthRegen",
            "Jungle",
            "LifeSteal",
            "MagicPenetration",
            "Mana",
            "ManaRegen",
            "Movement",
            "NonbootsMovement",
            "OnHit",
            "Slow",
            "SpellBlock",
            "SpellDamage",
            "SpellVamp",
            "Stealth",
            "Tenacity",
            "Trinket",
            "Vision",
        ]
    },
    {
        "sections": [ "Data" ], 
        "names": [
            "AvatarUniqueEffect",
            "BuildDepth",
            "CanBeDropped",
            "CanBeSold",
            "ClearUndoHistoryOnActivate",
            "Clickable",
            "Consumed",
            "CooldownShowDisabledDuration",
            "Description",
            "DisappersOnDeath",
            "DisplayName",
            "DropsOnDeath",
            "DynamicTooltip",
            *[ "Effect{}Amount".format(x) for x in range(0, 16) ],
            "EffectRadius",
            "Epicness",
            "FlatArmorMod",
            "FlatArmorPenetrationMod",
            "FlatAttackRangeMod",
            "FlatAttackSpeedMod",
            "FlatBlockMod",
            "FlatBubbleRadius",
            "FlatCastRangeMod",
            "FlatCooldownMod",
            "FlatCritChanceMod",
            "FlatCritDamageMod",
            "FlatDodgeMod",
            "FlatEnergyPoolMod",
            "FlatEnergyRegenMod",
            "FlatEXPBonus",
            "FlatHPPoolMod",
            "FlatHPRegenMod",
            "FlatMagicDamageMod",
            "FlatMagicPenetrationMod",
            "FlatMagicPenetrationModPerLevel",
            "FlatMagicReduction",
            "FlatMissChanceMod",
            "FlatMovementSpeedMod",
            "FlatPhysicalDamageMod",
            "FlatPhysicalReduction",
            "FlatSpellBlockMod",
            "ForceLoad",
            "HideFromAll",
            "ImagePath",
            "InStore",
            "InventoryIcon",
            "InventorySlotMax",
            "InventorySlotMin",
            "IsRecipe",
            "ItemCalloutPlayer",
            "ItemCalloutSpectator",
            "ItemClass",
            "ItemGroup",
            "ItemId",
            "ItemType",
            "ItemVOGroup",
            "MaxGroupOwnable",
            "MaxStack",
            "PARStatName",
            "PercentArmorMod",
            "PercentArmorPenetrationMod",
            "PercentAttackRangeMod",
            "PercentAttackSpeedMod",
            "PercentBaseHPRegenMod",
            "PercentBaseMPRegenMod",
            "PercentBlockMod",
            "PercentBonusArmorPenetrationMod",
            "PercentBonusMagicPenetrationMod",
            "PercentBubbleRadius",
            "PercentCastRangeMod",
            "PercentCooldownMod",
            "PercentCritChanceMod",
            "PercentCritDamageMod",
            "PercentDodgeMod",
            "PercentEXPBonus",
            "PercentHealingAmountMod",
            "PercentHPPoolMod",
            "PercentHPRegenMod",
            "PercentLifeStealMod",
            "PercentMagicDamageMod",
            "PercentMagicPenetrationMod",
            "PercentMagicReduction",
            "PercentMovementSpeedMod",
            "PercentMultiplicativeAttackSpeedMod",
            "PercentMultiplicativeMovementSpeedMod",
            "PercentPhysicalDamageMod",
            "PercentPhysicalReduction",
            "PercentSlowResistMod",
            "PercentSpellBlockMod",
            "PercentSpellEffectivenessMod",
            "PercentSpellVampMod",
            "PercentTenacityCharacterMod",
            "PercentTenacityCleanseMod",
            "PercentTenacityItemMod",
            "PercentTenacityMasteryMod",
            "PercentTenacityRuneMod",
            "PlatformEnabled",
            "Price",
            *[ "RecipeItem{}".format(x) for x in range(0, 10) ],
            "RequiredChampion",
            *[ "RequiredItem{}".format(x) for x in range(0, 10) ],
            "RequiredLevel",
            "RequiredSpellName",
            "rFlatArmorModPerLevel",
            "rFlatArmorPenetrationMod",
            "rFlatArmorPenetrationModPerLevel",
            "rFlatCritChanceModPerLevel",
            "rFlatCritDamageModPerLevel",
            "rFlatDodgeMod",
            "rFlatDodgeModPerLevel",
            "rFlatEnergyModPerLevel",
            "rFlatEnergyRegenModPerLevel",
            "rFlatGoldPer10Mod",
            "rFlatHPModPerLevel",
            "rFlatHPRegenModPerLevel",
            "rFlatMagicDamageModPerLevel",
            "rFlatMagicPenetrationMod",
            "rFlatMagicPenetrationModPerLevel",
            "rFlatMovementSpeedModPerLevel",
            "rFlatPhysicalDamageModPerLevel",
            "rFlatSpellBlockModPerLevel",
            "rFlatTimeDeadMod",
            "rFlatTimeDeadModPerLevel",
            "rPercentArmorPenetrationMod",
            "rPercentArmorPenetrationModPerLevel",
            "rPercentAttackSpeedModPerLevel",
            "rPercentCooldownMod",
            "rPercentCooldownModPerLevel",
            "rPercentMagicPenetrationMod",
            "rPercentMagicPenetrationModPerLevel",
            "rPercentMovementSpeedModPerLevel",
            "rPercentTimeDeadMod",
            "rPercentTimeDeadModPerLevel",
            "SellBackModifier",
            "ShowInActiveItemDisplay",
            "SpecialRecipe",
            "SpellName",
            "SpellLevel",
            "SpellCharges",
            "UsableInStore",
            "UseEffect",
            "UseWhenAcquired",
            *[ stat.format(par) for stat in [
                    "Flat{}PoolMod",
                    "Percent{}PoolMod",
                    "Flat{}RegenMod",
                    "Percent{}RegenMod",
                    "rFlat{}ModPerLevel",
                    "rFlat{}RegenModPerLevel",
                ] for par in [
                    "None",
                    "MP",
                    "Energy",
                    "None",
                    "Shield",
                    "BattleFury",
                    "DragonFury",
                    "GnarFury",
                    "Rage",
                    "Heat",
                    "Ferocity",
                    "Bloodwell",
                    "Wind",
                    "Other",
                ]
            ],
        ]
    },
# DATA/Spells/X.inibin, 
# DATA/Shared/Spells/X.inibin, 
# DATA/Characters/Y/Spells/X.inibin,
# DATa/Talents/X.inibin
    {
        "sections": [ "SpawningUI" ],
        "names": [
            "BuffNameFilter",
            "MaxNumberOfUnits",
        ]
    },
    {
        "sections": [ "SpellData" ],
        "names": [
            "AfterEffectName",
            "AIBlockLevel",
            "AIEndOnly",
            "AILifetime",
            "AIRadius",
            "AIRange",
            "AISendEvent",
            "AISpeed",
            "AlternateName",
            "AlwaysSnapFacing",
            "AmmoCountHiddenInUI",
            "AmmoNotAffectedByCDR",
            "AmmoRechargeTime",
            *[ "AmmoRechargeTime{}".format(x) for x in range(0, 7) ],
            "AmmoUsed",
            *[ "AmmoUsed{}".format(x) for x in range(0, 7) ],
            "AnimationLeadOutName",
            "AnimationLoopName",
            "AnimationName",
            "AnimationWinddownName",
            "ApplyAttackDamage",
            "ApplyAttackEffect",
            "ApplyMaterialOnHitSound",
            "AttackDelayCastOffsetPercent",
            "BelongsToAvatar",
            "BounceRadius",
            "CanCastWhileDisabled",
            "CancelChargeOnRecastTime",
            "CanMoveWhileChanneling",
            "CannotBeSuppressed",
            "CanOnlyCastWhileDead",
            "CanOnlyCastWhileDisabled",
            "CantCancelWhileChanneling",
            "CantCancelWhileWindingUp",
            "CantCastWhileRooted",
            "CastConeAngle",
            "CastConeDistance",
            "CastFrame",
            "CastRadius",
            *[ "CastRadius{}".format(x) for x in range(0, 7) ],
            "CastRadiusSecondary",
            *[ "CastRadiusSecondary{}".format(x) for x in range(0, 7) ],
            "CastRadiusSecondaryTexture",
            "CastRadiusTexture",
            "CastRange",
            *[ "CastRange{}".format(x) for x in range(0, 7) ],
            "CastRangeDisplayOverride",
            *[ "CastRangeDisplayOverride{}".format(x) for x in range(0, 7) ],
            "CastRangeGrowthDuration",
            *[ "CastRangeGrowthDuration{}".format(x) for x in range(0, 7) ],
            "CastRangeGrowthMax",
            *[ "CastRangeGrowthMax{}".format(x) for x in range(0, 7) ],
            "CastRangeTextureOverrideName",
            "CastRangeUseBoundingBoxes",
            "CastTargetAdditionalUnitsRadius",
            "CastType",
            "ChannelDuration",
            *[ "ChannelDuration{}".format(x) for x in range(0, 7) ],
            "ChargeUpdateInterval",
            "CircleMissileAngularVelocity",
            "CircleMissileRadialVelocity",
            "ClientOnlyMissileTargetBoneName",
            "Coefficient",
            "Coefficient2",
            "ConsideredAsAutoAttack",
            "Cooldown",
            *[ "Cooldown{}".format(x) for x in range(0, 7) ],
            "CursorChangesInGrass",
            "CursorChangesInTerrain",
            "DeathRecapPriority",
            "DelayCastOffsetPercent",
            "DelayTotalTimePercent",
            "Description",
            "DisableCastBar",
            "DisplayName",
            "DoesntBreakChannels",
            "DoNotNeedToFaceTarget",
            "DrawSecondaryLineIndicator",
            "DynamicExtended",
            "DynamicTooltip",
            *[ "Effect{}Level{}Amount".format(x, y) for x in range(0, 17) for y in range(0, 7) ],
            "ExcludedUnitTags",
            "Flags",
            *[ "FloatStaticsDecimals{}".format(x) for x in range(0, 17) ],
            *[ "FloatVarsDecimals{}".format(x) for x in range(0, 17) ],
            "HaveAfterEffect",
            "HaveHitBone",
            "HaveHitEffect",
            "HavePointEffect",
            "HideRangeIndicatorWhenCasting",
            "HitBoneName",
            "HitEffectName",
            "HitEffectOrientType",
            "HitEffectPlayerName",
            "IgnoreAnimContinueUntilCastFrame",
            "IgnoreRangeCheck",
            "InventoryIcon",
            "InventoryIcon1",
            "InventoryIcon2",
            "InventoryIcon3",
            "IsDisabledWhileDead",
            "IsToggleSpell",
            "KeywordWhenAcquired",
            *[ "Level{}Desc".format(x) for x in range(0, 7) ],
            "LineDragLength",
            "LineMissileBounces",
            "LineMissileCollisionFromStartPoint",
            "LineMissileDelayDestroyAtEndSeconds",
            "LineMissileEndsAtTargetPoint",
            "LineMissileFollowsTerrainHeight",
            "LineMissileTargetHeightAugment",
            "LineMissileTimePulseBetweenCollisionSpellHits",
            "LineMissileTrackUnits",
            "LineMissileTrackUnitsAndContinues",
            "LineMissileUsesAccelerationForBounce",
            "LineTargetingBaseTextureOverrideName",
            "LineTargetingTargetTextureOverrideName",
            "LineWidth",
            *[ "LocationTargettingLength{}".format(x) for x in range(0, 8) ],
            *[ "LocationTargettingWidth{}".format(x) for x in range(0, 8) ],
            "LockConeToPlayer",
            "LookAtPolicy",
            "LuaOnMissileUpdateDistanceInterval",
            "ManaCost",
            *[ "ManaCost{}".format(x) for x in range(0, 8) ],
            *[ "Map{}_Effect{}Level{}Amount".format(m, x, y) for x in range(0, 17) for y in range(0, 7) for m in range(0,15) ],
            "MaxAmmo",
            *[ "MaxAmmo{}".format(x) for x in range(0, 7) ],
            "MaxGrowthRangeTextureName",
            "MaxGrowthLineBaseTextureName",
            "MaxGrowthLineTargetTextureName",
            "MaxHighlightTargets",
            "MinimapIcon",
            "MinimapIconDisplayFlag",
            "MinimapIconRotation",
            "MissileAccel",
            "MissileBoneName",
            "MissileBlockTriggersOnDestroy",
            "MissileEffect",
            "MissileEffectPlayer",
            "MissileFixedTravelTime",
            "MissileFollowsTerrainHeight",
            "MissileGravity",
            "MissileLifetime",
            "MissileMaxSpeed",
            "MissileMinSpeed",
            "MissileMinTravelTime",
            "MissilePerceptionBubbleRadius",
            "MissilePerceptionBubbleRevealsStealth",
            "MissileSpeed",
            "MissileTargetHeightAugment",
            "MissileUnblockable",
            "Name",
            "NoWinddownIfCancelled",
            "NumSpellTargeters",
            "OrientRadiusTextureFromPlayer",
            "OrientRangeIndicatorToCursor",
            "OrientRangeIndicatorToFacing",
            "OverrideCastTime",
            "ParticleStartOffset",
            "PhysicalDamageRatio",
            "PlatformEnabled",
            "PointEffectName",
            "Ranks",
            "RangeIndicatorTextureName",
            "RequiredUnitTags",
            "SelectionPreference",
            "Sound_CastName",
            "Sound_HitName",
            "Sound_VOEventCategory",
            "SpellCastTime",
            "SpellDamageRatio",
            "SpellRevealsChampion",
            "SpellTotalTime",
            "StartCooldown",
            "SubjectToGlobalCooldown",
            "TargeterConstrainedToRange",
            "TargettingType",
            "TextFlags",
            "TriggersGlobalCooldown",
            "UpdateRotationWhenCasting",
            "UseAnimatorFramerate",
            "UseAutoattackCastTime",
            "UseChargeChanneling",
            "UseChargeTargeting",
            "UseGlobalLineIndicator",
            "UseMinimapTargeting",
            "Version",
            "x1",
            "x2",
            "x3",
            "x4",
            "x5",
        ]
    },
    {
        "sections": [ "OffsetTargeting" ],
        "names": [
            "OT_ArcTextureOverride",
            "OT_ArcThicknessOffset",
            "OT_AreaRadius",
            "OT_AreaRadius1",
            "OT_AreaRadius2",
            "OT_AreaRadius3",
            "OT_AreaRadius4",
            "OT_AreaRadius5",
            "OT_AreaTextureOverride",
            "OT_DisplaysArcTargeter",
            "OT_DisplaysAreaIndicator",
            "OT_DisplaysLineIndicator",
            "OT_IsArcDirectionLeft",
            "OT_LineBaseTextureOverride",
            "OT_LineEndsAtTargetPoint",
            "OT_LineLength",
            "OT_LineLength1",
            "OT_LineLength2",
            "OT_LineLength3",
            "OT_LineLength4",
            "OT_LineLength5",
            "OT_LineNoIndicatorRadiusTextureOverride",
            "OT_LineTargetTextureOverride",
            "OT_LineWidth",
        ]
    },
    {
        "sections": [ "SecondaryTargeting" ],
        "names": [
            "CastRadius",
            "CastRadiusTexture",
            "CastRange",
            *[ "CastRange{}".format(x) for x in range(1, 8) ],
            "CastRangeGrowthMax",
            *[ "CastRangeGrowthMax{}".format(x) for x in range(1, 8) ],
            "CastRangeGrowthDuration",
            *[ "CastRangeGrowthDuration{}".format(x) for x in range(1, 8) ],
            "LineTargetingBaseTextureOverrideName",
            "LineTargetingTargetTextureOverrideName",
            "LineWidth",
            *[ "LocationTargettingWidth{}".format(x) for x in range(1, 7) ],
            *[ "LocationTargettingLength{}".format(x) for x in range(1, 7) ],
            "TargettingType",
        ]
    },
    {
        "sections": [ *["SpellTargeter{}".format(x) for x in range(0, 9)] ],
        "names": [
            *[ "{}{}".format(x,y) for x in [
                    "ConstraintPos",
                    "Center",
                    "End",
                    "Start",
                ] for y in [
                    "_AngleOffset",
                    "_BasePosition",
                    "_DistanceOffset",
                    "_OrientationType",
                ]
            ],
            "AlwaysDraw",
            "Center",
            "ConeAngle",
            "ConeRange",
            "ConeFollowsEnd",
            "ConstraintPos",
            "ConstraintRange",
            "DrawableType",
            "End",
            "FallbackDirection",
            "HasMaxGrowRangeTexture",
            "HideWithLineIndicator",
            "IsConstrainedToRange",
            "IsClockwiseArc",
            "Length",
            *[ "Length{}".format(x) for x in range(0,7) ],
            "LineStopsAtEndPosition",
            "LineTargetingTargetTextureOverrideName",
            "LineTargetingBaseTextureOverrideName",
            "LineWidth",
            "MaxAngle",
            "MaxAngleRangeFactor",
            "MinAngle",
            "MinAngleRangeFactor",
            "MinimumDisplayedRange",
            "OverrideBaseRange",
            *[ "OverrideBaseRange{}".format(x) for x in range(0,7) ],
            "OverrideRadius",
            *[ "OverrideRadius{}".format(x) for x in range(0,7) ],
            "RangeGrowthDuration",
            *[ "RangeGrowthDuration{}".format(x) for x in range(0,7) ],
            "RangeGrowthMax",
            *[ "RangeGrowthMax{}".format(x) for x in range(0,7) ],
            "RangeIndicatorTextureName",
            "Start",
            "TargettingType",
            "TextureBaseMaxGrow",
            "TextureBaseOverride",
            "TextureCone",
            "TextureConeMaxGrow",
            "TextureMaxGrow",
            "TextureOrientation",
            "TextureOverride",
            "TextureTargetMaxGrow",
            "TextureTargetOverride",
            "TextureWall",
            "Thickness",
            *[ "Thickness{}".format(x) for x in range(0,7) ],
            "ThicknessOffset",
            "UseCasterBoundingBox",
            "UseGlobalLineIndicator",
            "UseMinimapTargeting",
            "WallOrientation",
            "WallRotation",
        ]
    },
# DATA/Characters/X/X.inibin
# DATA/Characters/Y/Skins/X/X.inibin
    {
        "sections": [ "ContextualAction" ],
        "names": [
            "RuleConfigFile",
        ]
    },
    {
        "sections": [ "Data" ],
        "names": [
            "AbilityPowerIncPerLevel",
            "AcquisitionRange",
            "AllowPetControl",
            "AlwaysVisible",
            "Armor",
            "ArmorMaterial",
            "ArmorPerLevel",
            "AssetCategory",
            "AttackAutoInterruptPercent",
            "AttackCastTime",
            "AttackDelayCastOffsetPercent",
            "AttackDelayCastOffsetPercentAttackSpeedRatio",
            "AttackDelayOffsetPercent",
            "AttackRange",
            "AttackRank",
            "AttackSpeed",
            "AttackSpeedPerLevel",
            "AttackTotalTime",
            "BaseAbilityPower",
            "BaseCritChance",
            "BaseDamage",
            "BaseDodge",
            "BaseFactorHPRegen",
            "BaseFactorMPRegen",
            "BaseHP",
            "BaseMP",
            "BaseMissChance",
            "BaseSpellEffectiveness",
            "BaseStaticHPRegen",
            "BaseStaticMPRegen",
            "BotEnabled",
            "BotEnabledMM",
            "CastShadows",
            "ChampionId",
            "CharAudioNameOverride",
            "ChasingAttackRangePercent",
            "Classification",
            "CritDamageBonus",
            "CritPerLevel",
            "CS_easy",
            "CS_medium",
            "CS_hard",
            "DamagePerLevel",
            "DeathEventListeningRadius",
            "DeathTime",
            "DefenseRank",
            "DelayCastOffsetPercent",
            "DelayTotalTimePercent",
            "Description",
            "DifficultyRank",
            "DisableAggroIndicator",
            "DisableContinuousTargetFacing",
            "DisableGlobalDeathEffect",
            "DisableUltReadySounds",
            "DodgePerLevel",
            "DrawPARLikeHealth",
            "EnemyTooltip",
            "ExperienceRadius",
            "ExpGivenOnDeath",
            *[ v.format(a, x if x > 0 else  "") for a in [
                    "BaseAttack",
                    "BasicAttack",
                    "ExtraAttack",
                    "CritAttack",
                    "ExtraCritAttack",
                    "CriticalAttack",
                ] for v  in [
                    "{}{}",
                    "{}{}_AttackCastTime",
                    "{}{}_AttackCastDelayOffsetPercent",
                    "{}{}_AttackDelayCastOffsetPercent",
                    "{}{}_AttackDelayCastOffsetPercentAttackSpeedRatio",
                    "{}{}_AttackDelayOffsetPercent",
                    "{}{}_AttackTotalTime",
                    "{}{}_Probability",
                ] for x in range(0, 10)
            ],
            *[ "ExtraSpell{}".format(x) for x in range(0, 17) ],
            "FireworksEnabled",
            "FriendlyTooltip",
            "GameplayCollisionRadius",
            "GlobalExpGivenOnDeath",
            "GlobalGoldGivenOnDeath",
            "GoldGivenOnDeath",
            "GoldRadius",
            "HitFxScale",
            "HoverIndicatorRadius",
            "HoverIndicatorTextureName",
            "HoverLineIndicatorBaseTextureName",
            "HoverLineIndicatorTargetTextureName",
            "HoverLineIndicatorWidth",
            "HPPerLevel",
            "HPRegenPerLevel",
            "Immobile",
            "IsElite",
            "IsEpic",
            "IsImportantBotTarget",
            "IsMelee",
            "JointForAnimAdjustedSelection",
            "LevelDodge",
            "LevelSpellEffectiveness",
            "LocalExpGivenOnDeath",
            "LocalGoldGivenOnDeath",
            "LocalGoldSplitWithLastHitter",
            "Lore1",
            "Lore2",
            "MagicRank",
            "MaxLevels",
            "Metadata",
            "MonsterDataTableId",
            "MoveSpeed",
            "MPPerLevel",
            "MPRegenPerLevel",
            "Name",
            "NeverRender",
            "NoAutoAttack",
            "NoHealthBar",
            "OccludedUnitSelectableDistance",
            "OutlineBBoxExpansion",
            "PARColor",
            "PARDisplayThroughDeath",
            "PARFadeColor",
            "PARHasRegenText",
            "PARIncrements",
            "PARMaxSegments",
            "PARNameString",
            "PARType",
            *[ p.format(x) for x in range(1, 7) for p in [
                    "Passive{}",
                    "Passive{}Desc",
                    *[ "PassLev{{}}Desc{}".format(x) for x in range(0,7) ],
                    "Passive{}Icon",
                    *[ "Passive{{}}Level{}".format(x) for x in range(0,7) ],
                    *[ "Passive{{}}Effect{}".format(x) for x in range(0,7) ],
                    "Passive{}LuaName",
                    "Passive{}Name",
                    "Passive{}NumEffects",
                    "Passive{}Range",
                ]
            ],
            "PassiveSpell",
            "PathfindingCollisionRadius",
            "PerceptionBubbleRadius",
            "PlatformEnabled",
            "PostAttackMoveDelay",
            "RecordAsWard",
            "Roles",
            "SearchTags",
            "SelectionHeight",
            "SelectionRadius",
            "SequentialAutoAttacks",
            "ServerOnly",
            "ShouldFaceTarget",
            "Significance",
            "SkipDrawOutline",
            "SoulGivenOnDeath",
            *[ s.format(x) for x in range(1, 5) for s in [
                    "Spell{}",
                    "Spell{}Desc",
                    "Spell{}DisplayName",
                    "SpellsUpLevels{}",
                ]
            ],
            "SpellBlock",
            "SpellBlockPerLevel",
            "SR_easy",
            "SR_medium",
            "SR_hard",
            "Tips1",
            "Tips2",
            "Tips3",
            "TowerTargetingPriorityBoost",
            "TriggersOrderAcknowledgementVO",
            "UnitTags",
            "UseChampionVisibility",
            "UseRingIconForKillCallout",
            "WeaponMaterial",
            "`WeaponMaterial",
            "WeaponMaterial1",
            "WeaponMaterial2",
            "WeaponMaterial3",
            "WeaponMaterial4",
        ]
    },
    {
        "sections": [ "DefaultAnimations" ],
        "names": [
            *[ "Animation{}".format(x) for x in range(1, 10) ],
            "NumberOfAnimations",
            "Significance",
        ]
    },
    {
        "sections": [ "Evolution" ],
        "names": [
            "EnabledWhileDead",
            "EvolveTitle",
            "Spell1EvolveDesc",
            "Spell1EvolveIcon",
            "Spell2EvolveDesc",
            "Spell2EvolveIcon",
            "Spell3EvolveDesc",
            "Spell3EvolveIcon",
            "Spell4EvolveDesc",
            "Spell4EvolveIcon",
        ]
    },
    {
        "sections": [ "HealthBar" ],
        "names": [
            "AttachToBone",
            "HPPerTick",
            "ParallaxOffset",
            "Scale",
            "ShowWhileUntargetable",
            "UnitBarKey",
            "WorldOffset",
            "XOffset",
            "YOffset",
        ]
    },
    {
        "sections": [ "IdleParticles" ],
        "names": [
            "BeamParticle",
            "BeamShouldAlwayStargetEnemy",
            "BeamTargetParticle",
            "ChampTargetingParticle",
            "GameplayCollisionRadius",
            "NumberOfParticles",
            "SelfIllumination",
            *[ "Particle{}".format(x) for x in range(0, 100) ],
            "TowerTargetingParticle",
            "TowerTargetingParticle2",
            "TowerTargetingParticle2Death",
        ]
    },
    {
        "sections": [ *[ "Info{}".format(x if x > 0 else "") for x in range(0, 8) ] ],
        "names": [
            "IconCircle",
            "IconCircleScale",
            "IconMinimap",
            "IconSquare",
        ]
    },
    {
        "sections": [ "Interaction" ],
        "names": [
            "DoubleSided",
            "IdleAnim",
            "RandomizeIdleAnimPhase",
        ]
    },
    {
        "sections": [ *[ "MeshSkin{}".format(x if x > 0 else "") for x in range(0, 30) ] ],
        "names": [
            "Animations",
            "ArmorMaterial",
            "AttributeFlags",
            "Body",
            "BrushAlphaOverride",
            "CastShadows",
            "ChampionSkinID",
            "ChampionSkinName",
            "DisablePreload",
            "EmissiveTexture",
            "ExtraCharacterPreloads",
            "Fresnel",
            "FresnelBlue",
            "FresnelGreen",
            "FresnelRed",
            "GlossTexture",
            "GlowFactor",
            "HPPerTick",
            "IconAvatar",
            "IsOpaque",
            *[ mat.format(x) for x in range(0,5) for mat in [
                    "MaterialOverride{}BlendMode",
                    "MaterialOverride{}GlossTexture",
                    "MaterialOverride{}EmissiveTexture",
                    "MaterialOverride{}FixedAlphaScrolling",
                    "MaterialOverride{}Priority",
                    "MaterialOverride{}RenderingMode",
                    "MaterialOverride{}SubMesh",
                    "MaterialOverride{}Texture",
                    "MaterialOverride{}UVScroll",
                ]
            ],
            "MaterialOverrideTransMap",
            "MaterialOverrideTransSource",
            "MaterialOverridePriority",
            "OverrideBoundingBox",
            "ParallaxOffset",
            "ParticleOverride_ChampionKillDeathParticle",
            "ParticleOverride_DeathParticle",
            "ReflectionFresnel",
            "ReflectionFresnelBlue",
            "ReflectionFresnelGreen",
            "ReflectionFresnelRed",
            "ReflectionMap",
            "ReflectionOpacityDirect",
            "ReflectionOpacityGlancing",
            "Scale",
            "SelfIllumination",
            "SimpleSkin",
            "Skeleton",
            "SkinScale",
            "SkinAudioNameOverride",
            "SkipVOOverride",
            "SubmeshesToHide",
            "Texture",
            "TextureLow",
            "UsesSkinVO",
            "UnitBarKey",
            "VOOverride",
            "Weight",
            "WorldOffset",
            "XOffset",
            "YOffset",
        ]
    },
    {
        "sections": [ "Minimap" ],
        "names": [
            "MinimapIconOverride",
        ]
    },
    {
        "sections": [ "Minion" ],
        "names": [
            "AlwaysUpdatePAR",
            "AlwaysVisible",
            "IsTower",
        ]
    },
    {
        "sections": [ "Package" ],
        "names": [
            "FallbackPackage",
            "FallbackINI",
        ]
    },
    {
        "sections": [ "RecItems", "TutorialRecItems" ],
        "names": [
            *[ "RecItem{}".format(x) for x in range(1, 7) ],
        ]
    },
    {
        "sections": [ "Sounds" ],
        "names": [
            "Attack1",
            "Attack2",
            "Attack3",
            "Attack4",
            "Click1",
            "Click2",
            "Click3",
            "Click4",
            "Death",
            "Move1",
            "Move2",
            "Move3",
            "Move4",
            "Ready",
            "Special1",
            "Special2",
        ]
    },
    {
        "sections": [ "Useable" ],
        "names": [
            "AllyCanUse",
            "CooldownSpellSlot",
            "EnemyCanUse",
            "GoldRedirectTargetUseableOnly",
            "HeroUseSpell",
            "IsUseable",
            "MinionUseable",
            "MinionUseSpell",
        ]
    }
]

def add2fixdict(section, name, result):
    h = ihash(section, name)
    if h in result:
        old = result[h]
        if old[0].lower() != section.lower() or old[1].lower() != name.lower():
            stderr.write("Collision {} {}*{} with {}*{}!\n".format(h, section, name, old[0], old[1]))
    else:
        result[h] = [section, name]

def fixlist2fixdict(arr, result = None):
    if result == None:
        result = {}
    for sn in arr:
        for section in sn["sections"]:
            for name in sn["names"]:
                add2fixdict(section, "'"+name, result)
                add2fixdict(section, name, result)
    return result
all_inibin_fixdict = fixlist2fixdict(all_inibin_fixlist)

# unhashes .inibin with dictionary
def fix(inib, fixd = None):
    if fixd == None:
        fixd = all_inibin_fixdict
    if not "Values" in inib:
        inib["Values"] = {}
    if not "UNKNOWN_HASHES" in inib:
        inib["UNKNOWN_HASHES"] = {}
    unk = inib["UNKNOWN_HASHES"]
    values = inib["Values"]
    for h in unk.copy():
        hint = int(h)
        if hint in fixd:
            section = fixd[hint][0]
            name = fixd[hint][1]
            if not section in values:
                values[section] = {}
            values[section][name] = unk[h]
            del unk[h]
            
def fix_dry(inib, fixd = None):
    unfixed = 0
    if fixd == None:
        fixd = all_inibin_fixdict
    if "UNKNOWN_HASHES" in inib:
        unfixed = len(inib["UNKNOWN_HASHES"])
        for h in inib["UNKNOWN_HASHES"]:
            if int(h) in fixd:
                unfixed -= 1
    return unfixed
        
